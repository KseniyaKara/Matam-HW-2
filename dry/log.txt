commit 8d95a57371a7bd6bd1fad779ec7683a7f9ae7849
Merge: 78ee31d 67a9926
Author: EmilCodes <levinemil1@gmail.com>
Date:   Sat Dec 14 11:52:33 2024 +0200

    Merge remote-tracking branch 'origin/devil_fruit'

commit 5ace3fe124754bdff98df06866ef317d18694588
Merge: 78ee31d cc4a3ee
Author: EmilCodes <levinemil1@gmail.com>
Date:   Sat Dec 14 11:42:26 2024 +0200

    On master: Auto stash before merge of "master" and "origin/devil_fruit"

commit cc4a3ee20c46adf6f5381e581d4e9288e4b8e549
Author: EmilCodes <levinemil1@gmail.com>
Date:   Sat Dec 14 11:42:26 2024 +0200

    index on master: 78ee31d Add bounty feature to Pirate

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..2d8f38e
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+
+dry/dry
diff --git a/dry/.vscode/settings.json b/dry/.vscode/settings.json
new file mode 100644
index 0000000..caa9595
--- /dev/null
+++ b/dry/.vscode/settings.json
@@ -0,0 +1,50 @@
+{
+    "files.associations": {
+        "array": "cpp",
+        "atomic": "cpp",
+        "bit": "cpp",
+        "*.tcc": "cpp",
+        "cctype": "cpp",
+        "clocale": "cpp",
+        "cmath": "cpp",
+        "compare": "cpp",
+        "concepts": "cpp",
+        "cstdarg": "cpp",
+        "cstddef": "cpp",
+        "cstdint": "cpp",
+        "cstdio": "cpp",
+        "cstdlib": "cpp",
+        "cstring": "cpp",
+        "cwchar": "cpp",
+        "cwctype": "cpp",
+        "deque": "cpp",
+        "string": "cpp",
+        "unordered_map": "cpp",
+        "vector": "cpp",
+        "exception": "cpp",
+        "algorithm": "cpp",
+        "functional": "cpp",
+        "iterator": "cpp",
+        "memory": "cpp",
+        "memory_resource": "cpp",
+        "numeric": "cpp",
+        "optional": "cpp",
+        "random": "cpp",
+        "string_view": "cpp",
+        "system_error": "cpp",
+        "tuple": "cpp",
+        "type_traits": "cpp",
+        "utility": "cpp",
+        "initializer_list": "cpp",
+        "iosfwd": "cpp",
+        "iostream": "cpp",
+        "istream": "cpp",
+        "limits": "cpp",
+        "new": "cpp",
+        "numbers": "cpp",
+        "ostream": "cpp",
+        "stdexcept": "cpp",
+        "streambuf": "cpp",
+        "typeinfo": "cpp"
+    }
+}
\ No newline at end of file
diff --git a/wet/Utilities.cpp b/wet/Utilities.cpp
old mode 100755
new mode 100644
diff --git a/wet/Utilities.h b/wet/Utilities.h
old mode 100755
new mode 100644
diff --git a/wet/test.expected b/wet/test.expected
old mode 100755
new mode 100644
diff --git a/wet/tests.cpp b/wet/tests.cpp
old mode 100755
new mode 100644

commit 78ee31d4765137ab0fd50502f44f63f2d3db7a01
Author: EmilCodes <levinemil1@gmail.com>
Date:   Sat Dec 14 11:30:26 2024 +0200

    Add bounty feature to Pirate

diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
old mode 100755
new mode 100644
index c96892e..6089d7b
--- a/dry/Pirate.cpp
+++ b/dry/Pirate.cpp
@@ -4,18 +4,26 @@
 
 Pirate::Pirate(const string& name): name(name) {}
 
+Pirate::Pirate(const string& name, unsigned int bounty): name(name), bounty(bounty) {}
 
 void Pirate::setName(const string& name){
     this->name = name;
 }
 
-
 std::string Pirate::getName(){
     return name;
 }
 
+void Pirate::setBounty(const unsigned int& bounty) {
+    this->bounty = bounty;
+}
+
+unsigned int Pirate::getBounty() {
+    return bounty;
+}
 
 std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
     os << pirate.name;
+    os << pirate.bounty;
     return os;
 }
diff --git a/dry/Pirate.h b/dry/Pirate.h
index 39a883a..bdb45a6 100644
--- a/dry/Pirate.h
+++ b/dry/Pirate.h
@@ -8,10 +8,13 @@ using std::string;
 class Pirate {
 private:
     string name;
+    unsigned int bounty = 0;
 
 public:
     Pirate(const string& name);
 
+    Pirate(const string& name, unsigned int bounty);
+
     Pirate() = default;
 
     ~Pirate() = default;
@@ -20,5 +23,10 @@ public:
 
     string getName();
 
+    void setBounty(const unsigned int& bounty);
+
+    unsigned int getBounty();
+
     friend std::ostream &operator<<(std::ostream &os, const Pirate &pirate);
+
 };
diff --git a/dry/main.cpp b/dry/main.cpp
old mode 100755
new mode 100644
index 6b659a1..bc70b5f
--- a/dry/main.cpp
+++ b/dry/main.cpp
@@ -10,6 +10,9 @@ int main() {
     Pirate luffy("Luffy");
     Pirate zoro("Zoro");
 
+    luffy.setBounty(1000000);
+    zoro.setBounty(500000);
+
     const int crewSize = 2;
     
     Pirate strawHatCrew[2];

commit 91da8a0362e89a783a84b07f3dc41860f8bfa597
Author: EmilCodes <levinemil1@gmail.com>
Date:   Sat Dec 14 11:01:19 2024 +0200

    Created a default constructor for Pirate

diff --git a/dry/Pirate.h b/dry/Pirate.h
old mode 100755
new mode 100644
index 7769667..39a883a
--- a/dry/Pirate.h
+++ b/dry/Pirate.h
@@ -12,6 +12,8 @@ private:
 public:
     Pirate(const string& name);
 
+    Pirate() = default;
+
     ~Pirate() = default;
 
     void setName(const string& name);

commit 67a992620c204243a3c94749804df35fcebbf6d3
Author: Baraa Egbaria <mohammadegbaria@Mohammads-MacBook-Pro.local>
Date:   Fri Dec 13 02:44:01 2024 +0200

    [Feature] Add devil fruit feature

diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
index c96892e..fc3c314 100755
--- a/dry/Pirate.cpp
+++ b/dry/Pirate.cpp
@@ -2,7 +2,7 @@
 #include "Pirate.h"
 
 
-Pirate::Pirate(const string& name): name(name) {}
+Pirate::Pirate(const string& name, DEVIL_FRUIT devilFruit): name(name), devilFruit(devilFruit) {}
 
 
 void Pirate::setName(const string& name){
@@ -10,12 +10,32 @@ void Pirate::setName(const string& name){
 }
 
 
+void Pirate::setDevilFruit(DEVIL_FRUIT devilFruit){
+    this->devilFruit = devilFruit;
+}
+
+
 std::string Pirate::getName(){
     return name;
 }
 
 
+DEVIL_FRUIT Pirate::getDevilFruit(){
+    return devilFruit;
+}
+
+
+const char* const devilFruitNames[] = {
+    "Gum Gum",
+    "Smoke Smoke",
+    "Flame Flame",
+    "Rumble Rumble",
+    "String String",
+    "Ice Ice",
+    "None"
+};
+
 std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
-    os << pirate.name;
+    os << pirate.name << " (Devil Fruit: " << devilFruitNames[pirate.devilFruit] << ")";
     return os;
 }
diff --git a/dry/Pirate.h b/dry/Pirate.h
index 7769667..4c044b1 100755
--- a/dry/Pirate.h
+++ b/dry/Pirate.h
@@ -5,18 +5,31 @@
 
 using std::string;
 
+enum DEVIL_FRUIT {
+    GUM_GUM_FRUIT,
+    SMOKE_SMOKE_FRUIT,
+    FLAME_FLAME_FRUIT,
+    RUMBLE_RUMBLE_FRUIT,
+    STRING_STRING_FRUIT,
+    ICE_ICE_FRUIT,
+    NONE
+};
+
 class Pirate {
 private:
     string name;
+    DEVIL_FRUIT devilFruit;
 
 public:
-    Pirate(const string& name);
+    Pirate(const string& name, DEVIL_FRUIT devilFruit = DEVIL_FRUIT::NONE);
 
     ~Pirate() = default;
 
     void setName(const string& name);
+    void setDevilFruit(DEVIL_FRUIT devilFruit);
 
     string getName();
+    DEVIL_FRUIT getDevilFruit();
 
     friend std::ostream &operator<<(std::ostream &os, const Pirate &pirate);
 };
diff --git a/dry/main.cpp b/dry/main.cpp
index 6b659a1..2911f71 100755
--- a/dry/main.cpp
+++ b/dry/main.cpp
@@ -7,7 +7,7 @@ using std::cout, std::endl;
 
 int main() {
 
-    Pirate luffy("Luffy");
+    Pirate luffy("Luffy", GUM_GUM_FRUIT);
     Pirate zoro("Zoro");
 
     const int crewSize = 2;

commit 74f6b97bc53ce50d65642ddedae20581be903ddf
Author: Baraa Egbaria <mohammadegbaria@Mohammads-MacBook-Pro.local>
Date:   Fri Dec 13 02:41:38 2024 +0200

    Initial Commit

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..0a4b9a1
--- /dev/null
+++ b/README.md
@@ -0,0 +1,7 @@
+# Matam Homework 2
+
+This repository contains all supplied files for the second homework assignment in the course "Introduction to Systems Programming" (234124) at the Technion.
+
+You may find the full instructions for this assignment on the [course's website](https://webcourse.cs.technion.ac.il/02340124/Winter2024-2025).
+
+Good luck and have fun!
diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
new file mode 100755
index 0000000..c96892e
--- /dev/null
+++ b/dry/Pirate.cpp
@@ -0,0 +1,21 @@
+
+#include "Pirate.h"
+
+
+Pirate::Pirate(const string& name): name(name) {}
+
+
+void Pirate::setName(const string& name){
+    this->name = name;
+}
+
+
+std::string Pirate::getName(){
+    return name;
+}
+
+
+std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
+    os << pirate.name;
+    return os;
+}
diff --git a/dry/Pirate.h b/dry/Pirate.h
new file mode 100755
index 0000000..7769667
--- /dev/null
+++ b/dry/Pirate.h
@@ -0,0 +1,22 @@
+
+#pragma once
+
+#include <iostream>
+
+using std::string;
+
+class Pirate {
+private:
+    string name;
+
+public:
+    Pirate(const string& name);
+
+    ~Pirate() = default;
+
+    void setName(const string& name);
+
+    string getName();
+
+    friend std::ostream &operator<<(std::ostream &os, const Pirate &pirate);
+};
diff --git a/dry/main.cpp b/dry/main.cpp
new file mode 100755
index 0000000..6b659a1
--- /dev/null
+++ b/dry/main.cpp
@@ -0,0 +1,25 @@
+#include <iostream>
+#include "Pirate.h"
+#include <cstring>
+
+using std::cout, std::endl;
+
+
+int main() {
+
+    Pirate luffy("Luffy");
+    Pirate zoro("Zoro");
+
+    const int crewSize = 2;
+    
+    Pirate strawHatCrew[2];
+    strawHatCrew[0] = luffy;
+    strawHatCrew[1] = zoro;
+    
+    cout << "Straw Hat crew contains:" << endl;
+    for (int i = 0; i < crewSize; i++) {
+        cout << strawHatCrew[i] << endl;
+    }
+
+    return 0;
+}
diff --git a/wet/Utilities.cpp b/wet/Utilities.cpp
new file mode 100755
index 0000000..c35944f
--- /dev/null
+++ b/wet/Utilities.cpp
@@ -0,0 +1,23 @@
+
+#include "Utilities.h"
+
+#include <iostream>
+
+using std::cerr;
+
+
+void exitWithError(MatamErrorType error) {
+    std::cerr << "Matam Error: ";
+    switch (error) {
+        case MatamErrorType::UnmatchedSizes:
+            std::cerr << "Unmatched matrices" << std::endl;
+            break;
+        case MatamErrorType::OutOfBounds:
+            std::cerr << "Out of bounds" << std::endl;
+            break;
+        case MatamErrorType::NotSquareMatrix:
+            std::cerr << "Matrix must be square to calculate determinant" << std::endl;
+            break;
+    }
+    exit(1);
+}
diff --git a/wet/Utilities.h b/wet/Utilities.h
new file mode 100755
index 0000000..c07958d
--- /dev/null
+++ b/wet/Utilities.h
@@ -0,0 +1,10 @@
+
+#pragma once
+
+enum class MatamErrorType {
+    UnmatchedSizes,
+    OutOfBounds,
+    NotSquareMatrix
+};
+
+void exitWithError(MatamErrorType error);
diff --git a/wet/test.expected b/wet/test.expected
new file mode 100755
index 0000000..d107ab8
--- /dev/null
+++ b/wet/test.expected
@@ -0,0 +1,19 @@
+|5|6|
+|7|8|
+
+Movie Name: MataMatrix
+Author: Baraa Egbaria
+
+Frame 0:
+|1|2|
+|3|4|
+
+Frame 1:
+|5|6|
+|7|8|
+
+Frame 2:
+|1|2|
+|3|4|
+
+-----End of Movie-----
diff --git a/wet/tests.cpp b/wet/tests.cpp
new file mode 100755
index 0000000..d8bc5a7
--- /dev/null
+++ b/wet/tests.cpp
@@ -0,0 +1,130 @@
+
+
+#include <string>
+#include <iostream>
+
+#include "Matrix.h"
+#include "MataMvidia.h"
+
+using namespace std;
+typedef bool (*testFunc)(void);
+
+bool testMatrix(std::ostream& out);
+bool testMataMvidia(std::ostream& out);
+
+
+#define ASSERT_TEST(expr)                                                      \
+do {                                                                           \
+    if (!(expr)) {                                                             \
+        std::cout << "\nAssertion failed at ";                                 \
+        std::cout << __FILE__ << ":" << __LINE__ << ": " << #expr << std::endl;\
+        exit(1);                                                               \
+    }                                                                          \
+} while (0)
+
+
+int main() {
+    testMatrix(std::cout);
+    testMataMvidia(std::cout);
+    return 0;
+}
+
+bool testMatrix(std::ostream& out) {
+    Matrix m1(2,2);
+    Matrix m2(2,2);
+
+    m1(0,0) = 1;
+    m1(0,1) = 2;
+    m1(1,0) = 3;
+    m1(1,1) = 4;
+
+    m2(0,0) = 5;
+    m2(0,1) = 6;
+    m2(1,0) = 7;
+    m2(1,1) = 8;
+
+    Matrix m3 = m1 + m2;
+    ASSERT_TEST(m3(0,0) == 6);
+    ASSERT_TEST(m3(0,1) == 8);
+    ASSERT_TEST(m3(1,0) == 10);
+    ASSERT_TEST(m3(1,1) == 12);
+
+    Matrix m4 = m1 * m2;
+    m4 *= 1;
+    ASSERT_TEST(m4(0,0) == 19);
+    ASSERT_TEST(m4(0,1) == 22);
+    ASSERT_TEST(m4(1,0) == 43);
+    ASSERT_TEST(m4(1,1) == 50);
+
+    m1 += m2;
+    m1 *= m2;
+    m1 -= m2;
+    m1 = m3 - m2;
+
+    ASSERT_TEST(-m1 == -1*m1);
+    ASSERT_TEST(-m1 == m1*-1);
+
+    ASSERT_TEST(m2.rotateClockwise().rotateCounterClockwise() == m2);
+
+    ASSERT_TEST(m1.transpose().transpose() == m1);
+
+    out << m2 << std::endl;
+
+    return true;
+}
+
+bool testMataMvidia(std::ostream& out) {
+    Matrix frame1(2,2);
+    Matrix frame2(2,2);
+
+    frame1(0,0) = 1;
+    frame1(0,1) = 2;
+    frame1(1,0) = 3;
+    frame1(1,1) = 4;
+
+    frame2(0,0) = 5;
+    frame2(0,1) = 6;
+    frame2(1,0) = 7;
+    frame2(1,1) = 8;
+
+    Matrix array[2];
+    array[0] = frame1;
+    array[1] = frame2;
+
+    MataMvidia movie("MataMatrix","Baraa Egbaria",array, 2);
+
+    ASSERT_TEST(movie[0] == frame1);
+
+    movie += frame1;
+
+    ASSERT_TEST(movie[2] == frame1);
+
+    Matrix frame01(2,2);
+    Matrix frame11(2,2);
+
+    frame01(0,0) = 10;
+    frame01(0,1) = 20;
+    frame01(1,0) = 30;
+    frame01(1,1) = 40;
+
+    frame11(0,0) = 50;
+    frame11(0,1) = 60;
+    frame11(1,0) = 70;
+    frame11(1,1) = 80;
+
+    Matrix array1[2];
+    array1[0] = frame01;
+    array1[1] = frame11;
+
+    MataMvidia movie1("MataMatrix and the chamber of secrets","Baraa Egbaria",array1, 2);
+
+    ASSERT_TEST(movie1[0] == frame01);
+
+    //test output
+    out << movie;
+
+    MataMvidia movie2 = movie + movie1;
+    movie += movie1;
+
+    return true;
+}
